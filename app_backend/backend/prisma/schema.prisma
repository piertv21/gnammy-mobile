// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String         @id @unique @default(cuid())
  username              String
  password              String
  location              String?
  imageUri             String
  followers             Following[]    @relation("SourceUser")
  following             Following[]    @relation("TargetUser")
  gnams                 Gnam[]         @relation("Author")
  likes                 Like[]         @relation("UserLikeGnam")
  sentNotifications     Notification[] @relation("SentNotifications")
  receivedNotifications Notification[] @relation("ReceivedNotifications")
  goals                 Goal[]
}

model Following {
  id           String @id @unique @default(cuid())
  sourceUser   User   @relation("SourceUser", fields: [sourceUserId], references: [id])
  sourceUserId String
  targetUser   User   @relation("TargetUser", fields: [targetUserId], references: [id])
  targetUserId String

  @@unique([sourceUserId, targetUserId])
}

model Gnam {
  id            String         @id @unique @default(cuid())
  author        User           @relation("Author", fields: [authorId], references: [id])
  authorId      String
  title         String
  description   String
  recipe        String
  shareCount    Int            @default(0)
  createdAt     DateTime       @default(now())
  likes         Like[]
  notifications Notification[]
  goals         Goal[]
}

model Like {
  id     String @id @unique @default(cuid())
  user   User   @relation("UserLikeGnam", fields: [userId], references: [id])
  userId String
  gnam   Gnam   @relation(fields: [gnamId], references: [id])
  gnamId String

  @@unique([userId, gnamId])
}

model NotificationType {
  id            String         @id @unique @default(cuid())
  typeName      String
  templateText  String
  notifications Notification[]
}

model Notification {
  id                 String           @id @unique @default(cuid())
  sourceUser         User             @relation("SentNotifications", fields: [sourceUserId], references: [id])
  sourceUserId       String
  targetUser         User             @relation("ReceivedNotifications", fields: [targetUserId], references: [id])
  targetUserId       String
  gnam               Gnam?            @relation(fields: [gnamId], references: [id])
  gnamId             String?
  notificationType   NotificationType @relation(fields: [notificationTypeId], references: [id])
  notificationTypeId String
  createdAt          DateTime         @default(now())
  seen               Boolean          @default(false)
}

model GoalType {
  id           String @id @unique @default(cuid())
  isFor        String // gnam, user
  templateText String
  goals        Goal[]
}

model Goal {
  id         String   @id @unique @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  gnam       Gnam?    @relation(fields: [gnamId], references: [id])
  gnamId     String?
  goalType   GoalType @relation(fields: [goalTypeId], references: [id])
  goalTypeId String
  achievedOn DateTime?
}
